from random import randrange
import fractions

def get_primes(n):
	numbers = set(range(n, 1, -1))
	primes = []
	while numbers:
		p = numbers.pop()
		primes.append(p)
		numbers.difference_update(set(range(p*2, n+1, p)))
	return primes

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

### main #################
primes = get_primes(443)
primes.sort()
del primes[0]
#print primes

pi = 1;
for x in primes:
	pi *= x
#print "pi=%X" % pi
#print pi
################################################################

'''
while True:
	kq = randrange(1, 2**12) + 2**12 + 2**13 + 2**14 + \
			2**15 + 2**16 + 2**17 + 2**18 + 2**19
	tq = 0
	while fractions.gcd(tq, pi) != 1:
		tq = randrange(1, 2**399);

	q = kq * pi * 2**400 + tq

	if miller_rabin(q, 40) == True:
		break
'''

with open("./problem/publickey","r") as f:
    n = f.readline().strip()[2:]
    e = f.readline().strip()[2:]

n = int(n,16)
e = int(e,16)

p = 0
bc = n % ((pi * (2**400))**2)
a = n - bc
c = (n-a) % (pi * (2**400))
b = (bc - c) / (pi * (2**400))


'''
#use sage

sage: factor(1094695521128)
2^3 * 11 * 17 * 2797 * 261619

a = eq1
b = eq2
c = eq3

var('kp kq tp tq')
eq1 = kp * kq == Mod(1094695521128,n)
eq2 = kp*tq + kq*tp == Mod(1783992529492269409855191983742355895174222741672192936138823657060221560427519339596648001331958604980592078956120026928896430,n)
eq3 = tp * tq  == Mod(690269682986480395980000357986684536730240691403525328918316654374873725555931907182087077740099009477811578342893178485212267103995818246677112250418887734350800475066469406192744556393640617499947582636329879416086829923937981044101788923,n) 


sage: solve([eq1,eq2,eq3,kp == 261619],kp,kq,tp,tq)
[[kp == 261619, kq == 4184312, tp == (1043948703640430782418404568397379785573236195992474448505791212189061002365437316289912568373152734060191290086628880727/4), tq == 2644841381877825608401959221778088150483500694677287391186353427678849797587665279076553467574250108900253019103656311796], [kp == 261619, kq == 4184312, tp == (172985189371373714461128042410590410960335742060194312498695649348978251298771850661682210408326934810093823651219865158939431/1046078), tq == (1092051772006774552010679814099994251332879773431415686144041059664308555232431936949919159698650865740216784351240566293138706/261619)]]
sage: solve([eq1,eq2,eq3,kp == 261619*2],kp,kq,tp,tq)
[[kp == 523238, kq == 2092156, tp == (172985189371373714461128042410590410960335742060194312498695649348978251298771850661682210408326934810093823651219865158939431/523039), tq == (546025886003387276005339907049997125666439886715707843072020529832154277616215968474959579849325432870108392175620283146569353/261619)], [kp == 523238, kq == 2092156, tp == (1043948703640430782418404568397379785573236195992474448505791212189061002365437316289912568373152734060191290086628880727/2), tq == 1322420690938912804200979610889044075241750347338643695593176713839424898793832639538276733787125054450126509551828155898]]
sage: solve([eq1,eq2,eq3,kp == 261619*4],kp,kq,tp,tq)
[[kp == 1046476, kq == 1046078, tp == (345970378742747428922256084821180821920671484120388624997391298697956502597543701323364420816653869620187647302439730317878862/523039), tq == (546025886003387276005339907049997125666439886715707843072020529832154277616215968474959579849325432870108392175620283146569353/523238)], [kp == 1046476, kq == 1046078, tp == 1043948703640430782418404568397379785573236195992474448505791212189061002365437316289912568373152734060191290086628880727, tq == 661210345469456402100489805444522037620875173669321847796588356919712449396916319769138366893562527225063254775914077949]]
'''

kp = 1046476
kq = 1046078
tp = 1043948703640430782418404568397379785573236195992474448505791212189061002365437316289912568373152734060191290086628880727
tq = 661210345469456402100489805444522037620875173669321847796588356919712449396916319769138366893562527225063254775914077949



q = kq * pi * 2**400 + tq
p = kp * pi * 2**400 + tp

#print q*p

cipher = ""
with open("./problem/ciphertext","r") as f:
    cipher = f.readline().strip()

cipher = int(cipher, 16)


d = modinv(e, (p-1)*(q-1))

m2 = pow(cipher, d, n)

msg = hex(m2)[2:-1]
print msg.decode("hex")